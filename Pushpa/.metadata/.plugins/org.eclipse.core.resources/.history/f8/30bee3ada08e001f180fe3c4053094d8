package Linked_List_Examples;

public class mergeTwoLinkedList {

	
		Node root;
		void create_list()
		{
		root = null;//preparing with empty root 
		}
		void insert(int data) {
		Node n = new Node(data);
		if (root == null)
		root = n;//n becomes 1st so
		 else {
			 
		Node t = root;
		while (t.next != null) {
		t = t.next;
		}
		t.next = n;
		}
		System.out.println(data + " inserted");

		}
		void print_list() {
		if (root == null)
		System.out.println("List Empty");
		else {
		Node t = root;
		while (t != null) {
		System.out.print("|" + t.data + "|->");
		t = t.next;
		}
		}
		}
		
		
		Node merge_list(Node r1,Node r2)
		{
		Node i,j;
		Node root3;

		i=r1;
		j=r2;
	
		//temp array to keep sorted data 
		//temp=new int[root3.next!=null];
		//tindex=start;
		//compare and copy in order
		
		while(i!=null && j!=null)
		{
		if(i.data<j.data)
		root3.next=i.next;
		else
		temp[tindex++]=a[j++];
		}
		//copy leftover while(i<=mid)
		temp[tindex++]=a[i++];
		while(j<=end)
		temp[tindex++]=a[j++];

		//copy back to a from temp 
		for(i=start;i<=end;i++)
		a[i]=temp[i];
		}
		public static void main(String args[])
		{
			mergeTwoLinkedList list1= new mergeTwoLinkedList();
		list1.create_list();
		list1.insert(10);
		list1.insert(15);
		list1.insert(20);
		list1.insert(25);
		System.out.println("Sorted list 1");
		list1.print_list();


		mergeTwoLinkedList list2= new mergeTwoLinkedList();
		list2.create_list();
		list2.insert(5);
		list2.insert(12);
		list2.insert(22);
		list2.insert(27);
		System.out.println("Sorted list 2");
		list2.print_list();
		}


	
}
