package Tree_Examples;

public class Tree_Class
{
 private Node root;

void create_Tree()
{
root=null;
}
void insert(Node r,Node n)//in bst manner //r is root , n is new node 
{
if(root==null)
root=n;
else
{
if(n.data<r.data)//if less to left
{
if(r.left==null)//empty left 
	{
r.left = n;
System.out.println(n.data + " inserted");
}
else
insert(r.left,n);//recursion call
}
else//if equal or greater than to right
	{
if(r.right==null)//empty left 
	{
r.right = n;
System.out.println(n.data + " inserted");
}
else
insert(r.right,n);//recursion call 
}

}

}




void search(Node r,int key)//in bst manner //r is root , n is new node 
{
if(root==null)
System.out.println("Tree is Empty");
else
{
if(key<r.data)//if less to left
{
if(r.left==null)//empty left 
	{

System.out.println(key + " not found");
}
else {
	
	if(key==r.data) {
		System.out.println(key+"found at the left side of tree");
	}
search(r.left,key);//recursion call
}
}
else//if equal or greater than to right
	{
if(r.right==null)//empty left 
	{

	System.out.println("Tree is Empty");
}
else
search(r.right,key);//recursion call 
}

}

}



void inorder(Node r) {
if (r != null) {//LPR 
	inorder(r.left);//L
	System.out.print(r.data + ",");//P 
	inorder(r.right);//L
	}
}



void preorder(Node r) {
if (r != null) {//LPR 
	System.out.print(r.data + ",");//P 
	preorder(r.left);//L
	preorder(r.right);//L }
}



}



void postorder(Node r) {
if (r != null) {//LPR 

	 postorder(r.left);//L
	 postorder(r.right);//L 
	System.out.print(r.data + ",");//P 
}

}


Node get_root() {
	return root;
}



public static void main(String args[])
{
Tree_Class obj=new Tree_Class();
obj.create_Tree();
Node x=new Node(10);
obj.insert(obj.get_root(),new Node(10));
obj.insert(obj.get_root(),new Node(30));
obj.insert(obj.get_root(),new Node(20));
obj.insert(obj.get_root(),new Node(5));
obj.insert(obj.get_root(),new Node(15));
obj.search(new Node(10),45);
System.out.println("Tree has:");
System.out.println("\nTree inorder:");
obj.inorder(obj.root);
System.out.println("\nTree preorder:");
obj.preorder(obj.root);
System.out.println("\nTree postorder:");
obj.postorder(obj.root);
}

}